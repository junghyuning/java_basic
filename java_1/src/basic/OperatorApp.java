package basic;

//연산자 = operator : 계산을 목적으로 제공되는 기호 & 키워드
// 피연산자 : 연산자에 의해 계산되는 값
// 단항연산자(피연산자 : 1개) , 이항연산자(2개)/ 삼항연산자(3개)

public class OperatorApp {

	public static void main(String[] args) {

		// 최우선연산자 ( )
		System.out.println("10+20*3 = " + (10 + 20 * 3));
		System.out.println("(10+20)*3 = " + ((10 + 20) * 3));
		System.out.println("===============================================================");

		// 단항 : 피연산자 1개
		// + : positive operator 양수화 연산자 : 피연산자에 +1을 곱하는 연산자 -> 무의미한 연산
		// - : negative operator 2의 보수(1의보수 +1) 연산자 = 음수화 -> 피연산자에 -1곱하는 연산자
		int a1 = 10;
		System.out.println("a1 = " + a1);
		System.out.println("-a1 = " + (-a1));

		// ~ (틸드) : Bit Not 연산자 (1의보수 연산자) 0<->1 바꿈
		System.out.println("~a1 = " + ~a1); // 거의 안씀 기계제어 정도(c언어)에나 사용함.
		System.out.println("===============================================================");

		// ! : Not 연산자 (T <-> F)
		System.out.println("20>10 = " + (20 > 10));
		System.out.println("!(20>10) = " + !(20 > 10));
		System.out.println("===============================================================");

		// ++ : 1증가 연산자 / 피연산자를 변수로 설정, 변수값을 1 증가&저장 시킴.
		// -- : 1감소 연산자
		// 단일 명령인경우, 연산자의 위치는 연산 결과에 영향 x (전위형 후위형)
		int a2 = 10, a3 = 10;
		System.out.println("a2=" + a2 + ", a3 = " + a3);

		a2++; // 단항 연산자 // a2 = a2+1 (2항?연산자)
		a3--;
		System.out.println("a2=" + a2 + ", a3 = " + a3);
		System.out.println("===============================================================");

		int a4 = 10, a5 = 10;
		System.out.println("a4=" + a4 + ", a5 = " + a5);
		System.out.println("===============================================================");

		// ++ 연산자와 -- 연산자로만 구성된 단일 명령이 아닌 경우 연산자의 위치는 연산 결과에 영향 O
		int result1 = ++a4; // 전처리 : ++a4 실행 된 후, result1 = a4 연산식 실행
		int result2 = a5++; // 후처리 : result = a5 실행 후에 a5++ 실행
		System.out.println("a4=" + a4 + ", a5 = " + a5);
		System.out.println("result1 = " + result1 + " result2 = " + result2);
		System.out.println("===============================================================");

		// (자료형) : 강제형변환
		// new : 객체생성연산자
		// 이항연산자 : 피연산자의 갯수가 2개 -> 산술연산자, 이동연산자, 비교연산자, 논리연산자, 대입연산자
		// 산술연산자 : *, /, %(나머지) , + , -

		int b1 = 20, b2 = 10;
		System.out.println(b1 + "*" + b2 + "=" + (b1 * b2));
		System.out.println(b1 + "/" + b2 + "=" + (b1 / b2));
		System.out.println(b1 + "%" + b2 + "=" + (b1 % b2));
		System.out.println(b1 + "+" + b2 + "=" + (b1 + b2));
		System.out.println(b1 + "-" + b2 + "=" + (b1 - b2));
		System.out.println("===============================================================");

		/*
		 * 사용x 그냥 설명한 것. bit 단위로 data 필터링 시에만 사용 이동 연산자 (shift 연산자) : 정수값을 원하는 방향으로 bit
		 * 수만큼 이동하는 연산자. <<(왼쪽 이동연산자), >>(오른쪽 이동연산자), >>>(오른쪽 이동 연산자) -> 잘 안씀 50(10) ->
		 * int 타입 8bit씩 4Byte 이므로 컴퓨터가 인식하는 50(10) = 00000000 00000000 00000000 00110010
		 * 50(10) << 3 (왼쪽으로 3비트) -> 00000000 00000000 00000001 10010000 = 400(10)
		 * 50(10) >> 3 (왼쪽으로 3비트) -> 00000000 00000000 00000000 00000110 = 6(10) -50(10)
		 * -> 11111111 11111111 11111111 11001110 -50(10) >>3 -> 11111111 11111111
		 * 11111111 11111001 -50(10) >>>3 -> 00011111 11111111 11111111 11111001 (빈 공간을
		 * 0으로 채움)
		 */

		// 비교(관계)연산자 : 비교하여 t/f 반환
		// <,>,<=,>=, ==, !=, instanceof (객체비교연산자 - 객체형변환 / 예외발생시 사용)
		System.out.println("20>10 =" + (20 > 10));
		System.out.println("20<10 =" + (20 < 10));
		System.out.println("20==10 =" + (20 == 10));
		System.out.println("20!=10 =" + (20 != 10));
		System.out.println("===============================================================");

		// bit논리 연산자 vs 일반논리 연산자
		// bit논리 연산자(우선) : 두 피연산자의 정수값을 bit 단위로 계산하기 위한 연산자 - &(논리곱), ^(배타적논리합), |( )
		// 일반논리연산자 : 두개의 비교 연산식을 연결하기 위한 연산자 - && / ||(or)

		int c = 20;
		System.out.println("c = " + c);
		// && : 첫번째 비교식이 거짓인 경우, 두번째 조건식 실행x (어차피 하나가 거짓이면 거짓이니까)
		System.out.println("c>=10 && c<= 30 = " + (c >= 10 && c <= 30)); // 범위표현
		// || : 첫번째 비교식이 참인 경우, 두번째 조건식 실행x (어차피 하나가 참이면 참이니까)
		System.out.println("c<10 || c> 30 = " + (c < 10 || c > 30));
		System.out.println("===============================================================");

		// 삼항연산자 : 피연산자의 갯수가 3개
		// 형식) 조건식? 참값 : 거짓값
		int d1 = 10, d2 = 20;
		System.out.println("큰값 = " + (d1 > d2 ? d1 : d2));

		d1 = 20;
		d2 = 10;
		System.out.println("큰값 = " + (d1 > d2 ? d1 : d2));

		int d3 = 10;
		System.out.println(d3 + " = " + (d3 % 2 == 0 ? "짝수" : "홀수"));
		d3 = 11;
		System.out.println(d3 + " = " + (d3 % 2 == 0 ? "짝수" : "홀수"));
		System.out.println("===============================================================");

		//대입연산자 : 왼쪽 피연산자(변수)에 값을 저장하기 위한 연산자
		//무조건 마지막에 실행
		//순수대입연산자 : 저장
		int e = 10;
		System.out.println("e = "+e); 
		//계산대입연산자 : 변수에 저장된 값을 계산후에 재 저장. *=, /=, %=. +=, -+,<<=, >>=, >>>=, &=, ^=, |=
		e+=20; // e=e+20; but 계산대입연산자 사용x시 형변환 위험성 존재
		System.out.println("e = "+e);
		System.out.println("===============================================================");
	}

}
